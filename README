Logfind


                             OVERVIEW

Logfind provides similar functionality to grep -F (aka fgrep) and sed(1) programs.
This was written to try to simplify searching through TT log files. It is capable of
handling .gz files natively and has mechanisms for iterating through /var/log/debesys
and /var/log/debesys/oldlogs in proper order if searching through multiple files.

In addition, if you know when to start your search, it can very quickly locate the
correct file to start at and begin searching through the files from the given time 
through newer files, or the given time through older files.

If using a script, you can define actions to be performed on each match. The most 
useful is the 'print' action, with a multitude of print options. There are also some
anaylsys actions implemented. You can also output line matches to any number of 
output files to separate them if wanted.

In addition to searching, there are options (--cat) to send to stdout a time range of
the logs. You can also split a time range into multiple files.

Logfind is extensible in that additional actions can be easily implemented for customizing. 
For instance, we could create an action to pretty print an ER, or maybe convert it to json.


                             SYNOPSYS

logfind pattern pattern ... file[.gz]                                    (1)
    Search for pattern(s) in a log file

logfind --script scriptfile infile                                       (2)
    Search for patterns using a script in a logfile

logfind --logname logname [--script file] [--after spec | --before spec] [pattern ...]   (3)
    Search for patterns in all logs with the ability to set a start time
    and direction.

logfind --cat start-time [--duration duration-time] [--split size] --logname logname     (5)
    cat or split a time range of the logs

logfind --list [--locate timestamp] --logname logname                     (6)
    List information about each logfile

(1) This is the simplist use of the program. It will search the given file
    for multiple patterns similar to grep -F. You can use '-' for stdin

(2) This specifies a script file to read remenisent of sed(1) syntax. 

(3) Using --logname will search all the log files in
    /var/log/debesys and /var/log/debesys/oldlogs. 
    --before will locate the correct file and then search from this point
             to older.
    --after will locate the proper file and start the search at this point
            to newer

    If neither --before or --after is used, the files will be searched from 
    newest to oldest, until the user stops the search or there are no more files 
    to search.

    the --before and --after spec can take the following formats:
        "YYYY-MM-DD hh:mm:ss"    # "2020-05-04 17:30:00" - TTLOG format in UTC
        n:days                   # "4:days"              - n days ago
        n:weeks                  # "2:weeks"             - n weeks ago

    --logname: The OC_cme.log is implied to be OC_cme.log*

(5) Using --cat will send to stdout the log files.
    start-time:    This sets the starting point of the log. It is in TTLOG format
                   "YYYY-MM-DD hh:mm:ss"
    duration-time: How much should be concatenated. Duration is "hh:mm:ss"
                    
    --split-size:  Split the output into multiple files. Size is in megabytes. The 
                   name of the files will be:
                   aa-<filename> through
                   zz-<filename>.

(6) This is a helpful little command that will display the starting and ending times
    of each logfile, the duration of the logfile as well as the size and approx decompressed size.
    --locate: If a time (in TTLOG format) is given, it will output the name of the logfile
              that contains that timestamp

COMMAND LINE EXAMPLES
        logfile bb77a423-f475-434b-a336-3bd09a32c464 OC_cme.log
           Search for the order in the given file

        logfind --logname OC_cme.log bb77a423-f475-434b-a336-3bd09a32c464
           Search for the order starting at the latest logfile and search through
           each older log in order

        logfind --logname OC_cme.log --before "2020-09-10 03:22:00" bb77a423-f475-434b-a336-3bd09a32c464 "S T A R T"
           Search for the order starting at the containing the given timestamp and search
           each older log in backward order. Also print any OC starts that may have happened

        logfind --logname OC_cme.log --after "2020-09-10 03:22:00" bb77a423-f475-434b-a336-3bd09a32c464 "S T A R T"
           Search for the order starting at the containing the given timestamp and search
           each newer log in forward order. Also print any OC starts that may have happened

        logfind --cat "2020-08-09 17:30:00" --duration "00:30:00" --logname OC_cme.log
           Cat 30 minutes worth of logs starting at the given time

        logfind --cat "2020-08-09 17:30:00" --duration "00:30:00" --split 100 --logname OC_cme.log
           Split 30 minutes worth of logs starting at the given time, into 100MB sized files

        logfind --list --locate "2020-07-04 03:00:10" --logname OC_cme.log
            Locate the logfile that contains the given timestamp



                             SCRIPT FILE

A script file contains multiple patterns to search for. For each pattern, a set
of actions can be specified to be executed against the matching line.

For each matching line, sub-patterns can be defined to perform a line search with
a set of associated actions.

A pattern is a fixed string, regex is not supported.

SYNTAX
    # The basic syntax is pretty simple.
    /pattern/ {
        action
          .
          .
    }

    Each time the pattern matches a line, the listed actions are executed
    in the order listed.

ACTIONS
    The following actions are supported for each pattern match. Additional
    actions can be easily defined and implemented for customizing.

    OUTPUT ACTIONS
        file "filename" [--append]
        file --stdout
        file --stderr
            The output of actions following this action will be sent to "filename". It is possible to 
            send output to multiple files, or have each pattern match sent to separate files
            if desired.

        print
            Print the current matched line to the current output.

        print "fmt"
            Print the matching line to the current output.
            "fmt" is a quoted string containing the text to be printed. The
            following format variables are defined:
                ${lineno}   Line number of the match
                ${offset}   File offset of the line where the match was found
                ${match}    Print the matched text.
                ${match+n}  Print match text + n addional characters
                ${match/c}  Print match text until the given delimiter 'c' is seen
                ${line}     Print the whole line
                ${line:m,}  Print the line, from m to end of line. If m < 0, the starting
                            position is m characters from the end.
                ${line:,n}  Print the line, from begining of line to n. If n < 0, the 
                            ending position is n characters from the end of the line.
                ${line:m,n} Print the line columns m through n. Negative numbers apply as above.
                ${time}     If the match line contains a timestamp, print it as the number
                            of microseconds. The line's timestamp must be in TTLOG format
                ${rotate-time} If the file has been rotated, print time of rotation in TTLOG format
                ${filename} Print the current filename

            Note: If a "fmt" is specified, a NL is not automatically added. You must supply
                  the \n if you want a new line.

        max-count n [--exit]
            Perform the actions n number of times. If --exit is specified, the program will
            exit when the count is reached, otherwise any further matches of this pattern 
            will be ignored.

        after n [--fmt "fmt"]
            Print n lines after the match. 
            --fmt: If present, will use the print format. For the purposes of the format, the entire 
                   line is considered a match.

            This is not yet implemented.

        before n [--fmt "fmt"]
            Print n lines before the match.
            --fmt: If present, will use the print format. For the purposes of the format, the entire 
                   line is considered a match.

            This is not yet implemented.

    ANALYSIS ACTIONS

        count "fmt"
            Count the number of matches of the pattern. "fmt" will be printed when the 
            program exits. Format must contain a ${count} specifier to print the count, 
            such as "Number of matches: ${count}\n"

        interval "fmt"
            Print the time since the last pattern match. The matched patterns must contain a TTLOG
            timestamp. The output will print the number of days, hours, minutes, seconds, and microseconds.
            "fmt" will be used to print the time. Format must contain a ${time} specifier to 
            print the time, such as "Elapsed time since last cxlrpl: ${time}\n"

            output:
                Elapsed time since last cxlrpl: 0d 0h 0m 13s 1220us

    MISC ACTIONS

        exit
            Exit the program

        /pattern/ {
            ...
        }
            Search for a pattern in the currently matched line. Each sub pattern
            can define a set of actions to be executed.

SPECIAL PATTERNS
    There are a number of special patterns defined

    /!program-start!/ {
        # This pattern will get invoked at the start of the program
    }

    /!program-end!/ {
        # This pattern will get invoked at the end of the program
    }

    /!file-start!/ {
        # This pattern will get invoked at the start of processing a file
    }
    /!file-end!/ {
        # This pattern will get invoked at the end of processing a file
    }

            
PERFORMANCE
    This program uses the aho-corasick algorithim for finding the pattern matches. With an 
    arbitrary number of patterns to search for, it is guaranteed to look at each input byte
    only once, therefore it will run in linear time with the size of the file. The implementation
    also does not break the input into lines but rather the pattern search is run against 
    the entire input, only when a match is found are the bounding line endings located. The
    input is backed by in LRU cache of 1MB pages with read ahead to support the 'before' and 
    'after' actions.

    Each sub-pattern is run using a separate context for the algorithim. Again, running multiple
    pattern searches on a line match will run in linear time.

EXAMPLES
    Simple example show a single search.
    This performs the same action as the command line
    logfind ExecutionReport OC_cme.log

        /ExecutionReport/ {
            print
        }

    You can search for multiple patterns.
    This performs the same action as the command line
    logfind ExecutionReport OrderCancelReject OC_cme.log

        /ExecutionReport/ {
            print
        }

        /OrderCancelReject/ {
            print
        }

    Find the given order id and count them, output goes to
    stdout. For each cxlrpl, print the elapsed time since 
    the previous cxlrpl and print the line number and line
    to a file.
        /bb77a423-f475-434b-a336-3bd09a32c464/ {
            count "Number of er's: ${count}\n"   # This will print when the program exits
            print
            /EXEC_TYPE_REPLACED/ {
                file "cxlrpl.log"
                interval "CxlRpl interval: ${time}\n"
                print "${lineno} ${line}\n"
            }
        }

    I want an easy way to identify order id I'm looking for
        /bb77a423-f475-434b-a336-3bd09a32c464/ {
            /EXEC_TYPE_REPLACED/ {
                print "REPLACE "
            }
            /EXEC_TYPE_NEW/ {
                print "NEW "
            }
            /EXEC_TYPE_TRADE/ {
                print "TRADE "
            }
            print
        }


    Print only the first match
        /ExecutionReport/ {
            max-count 1   
            print
        }

    Separate input into multiple files
        /ExecutionReport/ {
            file "ers.log"
            print
        }

        /OrderCancelReject/ {
            file "ocr.log"
            print
        }

    Search for an order id, for each trade, 
    print the account id and er.
        /bb77a423-f475-434b-a336-3bd09a32c464/ {
            /EXEC_TYPE_TRADE/ {
                /account_id=/ {
                    # Because er's are logged with space separated field=value
                    # pairs (user_id=1234 account_id=5678 price=1.3...) we print
                    # the starting at the match up to the first space character
                    print "account-id: ${match/ }\n"

                    # print the er
                    print
                }
            }
        }

NOTES
    See https://github.com/morenice/ahocorasick
    for original aho-corasick algorithm code I stole.

    I have not used flex/bison for the parser, but hand coded it. This will may change in the future
    but as of now, it is rather crude and sensitive to syntax errors and may crash if not correct.

