Logfind

                                   OVERVIEW
-------------------------------------------------------------------------------------------------

Logfind provides similar functionality to grep -F (aka fgrep) and sed(1) programs.
This was written to try to simplify searching through TT log files. It is capable of
handling .gz files natively and has mechanisms for iterating through /var/log/debesys
and /var/log/debesys/oldlogs in chronological order if searching through multiple files.

There are three different commands for this program: list, cat and search

list 
    Lists the logfiles giving thier starting and ending timestamps for the contents
    of the files, as well as the duration and compressed/decompressed file size. 
    You can also query which logfile a timestamp resides in.

cat 
    Will send to stdout a time range of the logs. Optionally, the output can be split
    to multiple files.

search 
    Allows searching for strings in the logs.

    If you know when to start your search, it can very quickly locate the
    correct file to start at and begin searching through the files from the given time 
    forward through newer files, or the given time backwards through older files.

    If using a script, you can define actions to be performed on each match. The most 
    useful is the 'print' action, with a multitude of print options. There are also some
    analysis actions implemented. You can also output line matches to any number of 
    output files to separate them if wanted.

    Logfind is also extensible in that additional actions can be easily implemented for customizing. 
    For instance, we could create an action to pretty print an ER, or maybe convert it to json.


                                        SYNOPSYS
-------------------------------------------------------------------------------------------------

logfind list logfile time [end-time]
    List the logfiles giving the starting and ending timestamps in the logs, the duration
    of the logs and compressed/decompressed file size. There's a summary printed at the end.

    logfile
        logfile will be used to generate a list of log files to be listed.
        e.g. "OC_cme.log" will include "OC_cme.log" as well as all log rotations of
        that logfile.

    time
        If a timestamp (TTLOG format: "YYYY-MM-DD hh:mm:ss") is given and end-time is not, 
        it will output the name of the file containing that timestamp. 

    end-time  (optional)
        Stop the list at the given time.
        end-time may be "YYYY-MM-DD hh:mm:ss" or  duration "hh:mm:ss" relative to start-time


logfind cat logfile [-1] start-time end-time [--split size]
    Cat the contents of the log files.

    logfile
        logfile will be used to generate a list of log files to be listed.
        e.g. "OC_cme.log" will include "OC_cme.log" as well as all log rotations of
        that logfile. '-' may be used to specify stdin

    -1  (optional)
        Interpret the logfile as the name of a log, do not include log rotations.

    start-time
        Start cat at the given time, in TTLOG format: "YYYY-MM-DD hh:mm:ss"

    end-time
        Stop the cat at the given time.
        end-time may be "YYYY-MM-DD hh:mm:ss" or  duration "hh:mm:ss" relative to start-time

    --split size
        split the output to files. The name of the files will be aa-xxxxx through zz-xxxxx.
        The size is in megabytes. Output will be written in the current directory.

logfind search logname [-1] [--script file] [--before spec] [--after spec] [pattern....]
    Search the logfiles for a list of strings. Either the script file or one or more patterns
    or both must be specified.

    logfile
        logfile will be used to generate a list of log files to be listed.
        e.g. "OC_cme.log" will include "OC_cme.log" as well as all log rotations of
        that logfile. '-' may be used to specify stdin.

    -1  (optional)
        Interpret the logfile as the name of a log, do not include log rotations.

    -s
    --script file (optional)
        The name of a script. See SCRIPT FILE below

    -b
    --before spec (optional)

    -a
    --after spec (optional)
        The before and after options indicate the starting time for the search and the
        direction. 
        Before will search backwards in the logs from the starting point, and after will search
        forward through the logs from the starting point.
        
        spec can be one of:
            "YYYY-MM-DD hh:mm:ss"    # "2020-05-04 17:30:00" - TTLOG format in UTC
            n:days                   # "4:days"              - n days ago
            n:weeks                  # "2:weeks"             - n weeks ago

    pattern... (optional)
        One or more strings to search for. Can be used in conjunction with a script file.


                               COMMAND LINE EXAMPLES
-------------------------------------------------------------------------------------------------
    search
        logfind search OC_cme.log bb77a423-f475-434b-a336-3bd09a32c464
           Search for the order starting at the latest logfile and search through
           each older log in order.

        logfind search OC_cme.log --before "2020-09-10 03:22:00" bb77a423-f475-434b-a336-3bd09a32c464 "S T A R T"
           Search for the order starting at the given timestamp and search
           each older log in backward order. Also print any OC starts that may have happened

        logfind search OC_cme.log --after "2020-09-10 03:22:00" bb77a423-f475-434b-a336-3bd09a32c464 "S T A R T"
           Search for the order starting at the given timestamp and search
           each newer log in forward order. Also print any OC starts that may have happened

        logfind search OC_cme.log --after "2020-09-10 03:22:00" --script oc.lf
           Run the script starting at the given timestamp and search each newer log in forward order. 

    cat
        logfind cat OC_cme.log "2020-08-09 17:30:00" "00:30:00" 
           Cat 30 minutes worth of logs starting at the given time

        logfind cat OC_cme.log "2020-08-09 17:30:00" "01:00:00" --split 100
           Split 1 hour worth of logs starting at the given time, into 100MB sized files

    list
        logfind list OC_cme.log
            List all logs.

        logfind list OC_cme.log "2020-07-04 03:00:10" 
            Locate the logfile that contains the given timestamp



                                SCRIPT FILE
-------------------------------------------------------------------------------------------------

A script file contains multiple patterns to search for. For each pattern, a set
of actions can be specified to be executed against the matching line.

For each matching line, sub-patterns can be defined to perform a line search with
a set of associated actions.

A pattern is a fixed string, regex is not supported.

The repo contains some canned scripts:
    oc.lf
        Script to locate certain startup logs

    find-orders.lf
        Helpful script for finding and printing execution reports.

    find-nos.lf
        Script for finding the NOS of an order


SYNTAX
    # The basic syntax is pretty simple.
    /pattern/ {
        action
          .
          .
    }

    Each time the pattern matches a line, the listed actions are executed
    in the order listed.

ACTIONS
    The following actions are supported for each pattern match. Additional
    actions can be easily defined and implemented for customizing.

    OUTPUT ACTIONS
        file "filename" [--append]
        file --stdout
        file --stderr
            The output of actions following this action will be sent to "filename". It is possible to 
            send output to multiple files, or have each pattern match sent to separate files
            if desired.

        print
            Print the current matched line to the current output.

        print "fmt"
            Print the matching line to the current output.
            "fmt" is a quoted string containing the text to be printed. The
            following format variables are defined:
                ${lineno}   Line number of the match
                ${offset}   File offset of the line where the match was found
                ${match}    Print the matched text.
                ${match+n}  Print match text + n addional characters
                ${match/c}  Print match text until the given delimiter 'c' is seen
                ${line}     Print the whole line
                ${line:m,}  Print the line, from m to end of line. If m < 0, the starting
                            position is m characters from the end.
                ${line:,n}  Print the line, from begining of line to n. If n < 0, the 
                            ending position is n characters from the end of the line.
                ${line:m,n} Print the line columns m through n. Negative numbers apply as above.
                ${time}     If the match line contains a timestamp, print it as the number
                            of microseconds (unix epoch time). The line's timestamp must be in TTLOG format
                ${rotate-time} If the file has been rotated, print time of rotation in TTLOG format
                ${filename} Print the current filename
                ${varname}  Print the contents of "varname". Some actions can set data into a variable,
                            this will print the variable. See regex for an example.

            Note: If a "fmt" is specified, a NL is not automatically added. You must supply
                  the \n if you want a new line.

        regex "pattern" varname
            Perform a regex match against the matching line. The regex grammer is egrep. If a match
            is found, the match will be placed in the variable 'varname'. This can then be printed
            using a print format. If a capture is used in the pattern, the captured text will be placed
            into 'varname'. Only one capture is supported.

        max-count n [--exit]
            Perform the actions n number of times. If --exit is specified, the program will
            exit when the count is reached, otherwise any further matches of this pattern 
            will be ignored.

        after n [--fmt "fmt"]
            Print n lines after the match. 
            --fmt: If present, will use the print format. For the purposes of the format, the entire 
                   line is considered a match.

            This is not yet implemented.

        before n [--fmt "fmt"]
            Print n lines before the match.
            --fmt: If present, will use the print format. For the purposes of the format, the entire 
                   line is considered a match.

            This is not yet implemented.

    ANALYSIS ACTIONS

        count "fmt"
            Count the number of matches of the pattern. "fmt" will be printed when the 
            program exits. Format must contain a ${count} specifier to print the count, 
            such as "Number of matches: ${count}\n"

        interval "fmt"
            Print the time since the last pattern match. The matched lines must contain a TTLOG
            timestamp. The output will print the number of days, hours, minutes, seconds, and microseconds.
            Format must contain a ${time} specifier to print the time, such as 
            "Elapsed time since last cxlrpl: ${time}\n"

            output:
                Elapsed time since last cxlrpl: 0d 0h 0m 13s 1220us

    MISC ACTIONS

        exit
            Exit the program

        /pattern/ {
            ...
        }
            Search for a pattern in the currently matched line. Each sub pattern
            can define a set of actions to be executed.

SPECIAL PATTERNS
    There are a number of special patterns defined

    /!program-start!/ {
        # This pattern will get invoked at the start of the program
    }

    /!program-end!/ {
        # This pattern will get invoked at the end of the program
    }

    /!file-start!/ {
        # This pattern will get invoked at the start of processing a file
    }
    /!file-end!/ {
        # This pattern will get invoked at the end of processing a file
    }

            
                                  ALGORITHIM
-------------------------------------------------------------------------------------------------
    This program uses the aho-corasick algorithim for finding the pattern matches. With an 
    arbitrary number of strings to search for, it is guaranteed to look at each input byte
    only once, therefore it will run in linear time with the size of the file regardless of the 
    number of search strings. The implementation also does not break the input into lines 
    but rather the strings search is run against the entire input, only when a match is found 
    are the bounding line endings located. 

    Each sub-pattern is run using a separate context for the algorithim. Again, running multiple
    pattern searches on a line match will run in linear time.

                                  EXAMPLES
-------------------------------------------------------------------------------------------------
    Simple example show a single search.
    This performs the same action as the command line:
    logfind search OC_cme.log ExecutionReport

        /ExecutionReport/ {
            print
        }

    You can search for multiple patterns.
    This performs the same action as the command line
    logfind search OC_cme.log ExecutionReport OrderCancelReject 

        /ExecutionReport/ {
            print
        }

        /OrderCancelReject/ {
            print
        }

    Find the given order id and count them, output goes to
    stdout. For each cxlrpl, print the elapsed time since 
    the previous cxlrpl and print the line number and line
    to a file.
        /bb77a423-f475-434b-a336-3bd09a32c464/ {
            count "Number of er's: ${count}\n"   # This will print when the program exits
            print
            /EXEC_TYPE_REPLACED/ {
                file "cxlrpl.log"
                interval "CxlRpl interval: ${time}\n"
                print "${lineno} ${line}\n"
            }
        }

    I want an easy way to identify the orders I find
        /bb77a423-f475-434b-a336-3bd09a32c464/ {
            /EXEC_TYPE_REPLACED/ {
                print "REPLACE "       # No new-line
            }
            /EXEC_TYPE_NEW/ {
                print "NEW "
            }
            /EXEC_TYPE_TRADE/ {
                print "TRADE "
            }
            print       # This will print on the same line as the other print's
        }


    Print only the first match
        /ExecutionReport/ {
            max-count 1   
            print
        }

    Separate input into multiple files
        /ExecutionReport/ {
            file "ers.log"
            print
        }

        /OrderCancelReject/ {
            file "ocr.log"
            print
        }

    Search for an order id, for each trade, 
    print the account id and er.
        /bb77a423-f475-434b-a336-3bd09a32c464/ {
            /EXEC_TYPE_TRADE/ {
                /account_id=/ {
                    # Because er's are logged with space separated field=value
                    # pairs (user_id=1234 account_id=5678 price=1.3...) we print
                    # the starting at the match up to the first space character
                    print "account-id: ${match/ }\n"

                    # print the er
                    print
                }
            }
        }

    Search for an order id, for each trade, 
    print the account id and user id using regex.
        /bb77a423-f475-434b-a336-3bd09a32c464/ {
            /EXEC_TYPE_TRADE/ {
                regex "account_id=([0-9]*)" acct   # capture the id
                regex "user_id=([0-9]*)" user

                print "acct: ${acct} user: ${user}"
                print
            }
        }

NOTES
    See https://github.com/mischasan/aho-corasick
    for original aho-corasick algorithm code I stole.

BUGS
    logfind reads data into 1MB buffers, which are placed into an LRU cache. When a match occurs
    printing the line will access this cache to print the line. However, I currently do not have 
    read-ahead implemented, so if a match occurs and the end of the line has not been read yet,
    the line will be truncated when printed.

    I have not used flex/bison for the parser, but hand coded it. This may change in the future
    but as of now, it is rather crude and sensitive to syntax errors and may crash if not correct.

